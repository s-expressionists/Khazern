The SICL project

For more information, including a more detailed specification of the
project, see http://common-lisp.net/project/sicl/ which has a complete
GIT repository.

SICL is not an acronym.  It doesn't mean anything in particular.
Pronounce it as "sickle".  The name was chosen so that it would be
easy to find using current search engines, and it had to contain
"CL". 

The SICL project has two purposes:

  * One is to provide modules for implementers of Common Lisp
    systems.  These modules are meant to be as portable and
    implementation-independent as possible.  The modules come in
    different flavors such as: high-level functions on sequences or
    lists, an implementation of FORMAT, READ, or LOOP, documentation
    strings for Common Lisp features, condition reporters, etc.

  * Another is to ultimately produce a high-quality, high-performance
    implementation of the Common Lisp language, based on those
    modules. 

Our objectives are (roughly in decreasing order of priority) to
produce high-quality modules with the following characteristics:

  * Correctness.  For that purpose, modules include extensive test
    suites. 

  * Debuggability.  Our modules should use very precise condition
    reporting, to simplify the task for programmers using a system
    containing SICL modules.  For that purpose, we use more precise
    conditions than the HyperSpec calls for, and very precise
    condition reporters associated with those conditions. 

  * Performance.  Our modules should be as fast as possible given the
    constraints on portability.  For that purpose, we include several
    special versions of many functions according to different
    combinations of keyword and optional arguments.  We also include
    compiler macros for many functions so as to avoid argument parsing
    at runtime, whenever argument parsing might be a significant part
    of the runtime of a function. 

  * Understandability. Our modules should be easy to understand to
    someone who is interested in knowing how the Common Lisp language
    might be implemented.  For that purpose, we avoid too-complicated
    code factoring techniques that might make the code less readable.
    We also include many comments that would normally not be required,
    so as to guide a reader who is familiar with the language, but who
    might have limited knowledge about how it might be implemented.

Contributions to the project:

  * If you find a defect in the code, please report it to the relevant
    mailing list (see the web site on common-lisp.net).  It is even
    better if you can include a test that demonstrates the defect, so
    that this test can be included in the test suite.  Best is if you
    also include a version of the code without the defect. 

  * You might want to become the maintainer of some existing,
    already-released module.  The work of such maintainer would be to
    act upon reports of defects and to work on improving the module in
    line with the objectives.  In order to qualify, you need
    substantial knowledge about the Common Lisp language, and probably
    also knowledge about how it might be implemented, and you would
    have to write code that conforms to the SICL coding standards.

  * You might want to take on the task of finishing a module that is
    partially written.  In addition to adding the missing features,
    this task would include the compilation of a test suite, making
    sure that the tests have significant coverage, including missing
    documentation strings.  Again, in order to qualify, you need
    substantial knowledge about the Common Lisp language, and probably
    also knowledge about how it might be implemented, and you would
    have to write code that conforms to the SICL coding standards.  

  * You might start implementing a module that has not been started
    yet.  

  * You might want to work on the second purpose of the project above,
    and implement part of the system such as the compiler, the garbage
    collector.
